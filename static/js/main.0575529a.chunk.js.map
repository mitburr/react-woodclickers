{"version":3,"sources":["components/Header.js","components/listArray.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","id","points","defineListArray","newCardsArray","_loop","i","URL","cardsArray","Title","title","src","alt","height","width","onClick","handleClick","length","BugCard","state","clickedArray","_this","find","element","setState","console","log","concat","components_Header","this","listArray","React","Component","App","Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NASeA,EAPF,SAASC,GACd,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,GAAK,QACrBH,EAAAC,EAAAC,cAAA,2EADW,IAEXF,EAAAC,EAAAC,cAAA,qBAAaH,EAAMK,OAAnB,8CCYeC,EAdG,SAASN,GAE3B,IADA,IAAIO,EAAgB,GADaC,EAAA,SAEzBC,GACR,IAAIC,EAAMV,EAAMW,WAAWF,GAAGC,IAC1BE,EAAQZ,EAAMW,WAAWF,GAAGI,MAChCN,EAAcE,GAAKR,EAAAC,EAAAC,cAAA,OAAKW,IAAOJ,EAAKK,IAAOH,EAC3CI,OAAS,MAAMC,MAAQ,MACvBC,QAAW,kBAAMlB,EAAMmB,YAAYnB,EAAMW,WAAWF,GAAGC,SAL/CD,EAAI,EAAGA,EAAIT,EAAMW,WAAWS,OAAQX,IAAID,EAAxCC,GASR,OAAOF,UCmBIc,6MAzBXC,MAAS,CACLjB,OAAQ,EACRkB,aAAc,MAElBJ,YAAe,SAACf,GACPoB,EAAKF,MAAMC,aAAaE,KAAK,SAACC,GAAa,OAAOA,IAAYtB,KAM/DoB,EAAKG,SAAS,CAACtB,OAAQ,IACvBuB,QAAQC,IAAI,0CANZL,EAAKG,SAAS,CAACtB,OAAQmB,EAAKF,MAAMjB,OAAO,IACzCmB,EAAKG,SAAS,CAACJ,aAAcC,EAAKF,MAAMC,aAAaO,OAAO1B,KAC5DwB,QAAQC,IAAIL,EAAKF,MAAMC,wFASvB,OACAtB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4B,EAAD,CAAQ1B,OAAU2B,KAAKV,MAAMjB,SAC9BJ,EAAAC,EAAAC,cAAC8B,EAAD,CAAWd,YAAea,KAAKb,YAAaR,WAAcA,YArBnDuB,IAAMC,WCIbC,MANf,WACE,OAAOnC,EAAAC,EAAAC,cAAA,eACLF,EAAAC,EAAAC,cAACkC,EAAD,QCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0575529a.chunk.js","sourcesContent":["import React from 'react'\n\nlet Header = function(props){\n        return <div id = \"head\">\n    <h1>Welcome young woodpecker, help yourself to a delicious treat!</h1>;\n    <h2>You are {props.points}/3 full. Be sure to diversify your diet!</h2>\n    </div>\n}\n\nexport default Header","import React from 'react'\n\n\nlet defineListArray = function(props){\n    let newCardsArray = [];\n    for(let i = 0; i < props.cardsArray.length; i++){    \n    let URL = props.cardsArray[i].URL\n    let Title = props.cardsArray[i].title\n    newCardsArray[i] = <img src = {URL} alt = {Title} \n    height = \"150\" width = \"150\"\n    onClick = {() => props.handleClick(props.cardsArray[i].URL)}></img>\n    }\n\n\n    return newCardsArray\n}\n\n    export default defineListArray","import React from 'react'\nimport Header from './Header'\nimport ListArray from './listArray'\nimport cardsArray from '../cardsArray.json'\n\n\n\nclass BugCard extends React.Component {\n    state  = {\n        points: 0,\n        clickedArray: []\n    };\n    handleClick =  (id) => {\n        if(! this.state.clickedArray.find((element) => {return element === id})){\n            this.setState({points: this.state.points+1});\n            this.setState({clickedArray: this.state.clickedArray.concat(id)})\n            console.log(this.state.clickedArray)\n        }\n        else{\n            this.setState({points: 0})\n            console.log(\"you've perished due to malnutrition.\")\n        }\n        };\n        \n        render(){\n            return (\n            <div>\n                <Header points = {this.state.points}/>\n               <ListArray handleClick = {this.handleClick} cardsArray = {cardsArray}/>\n            </div>);\n        }\n};\n\nexport default BugCard","import React from 'react';\nimport './App.css';\nimport BugCard from './components/Card'\n\n\nfunction App() {\n  return <wrapper> \n    <BugCard />\n  </wrapper>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}